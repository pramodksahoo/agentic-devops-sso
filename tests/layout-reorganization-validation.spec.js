import { test, expect } from '@playwright/test';

test.describe('Layout Reorganization Validation', () => {
  test('should display reorganized layout with all elements in correct positions', async ({ page }) => {
    // Set standard desktop viewport  
    await page.setViewportSize({ width: 1920, height: 1080 });
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle', timeout: 30000 });
    await page.waitForTimeout(3000);
    
    console.log('✓ Testing layout reorganization...');
    
    // 1. Check that "Transform Your DevOps Workflow" banner is at the top
    const workflowBanner = page.getByText('Transform Your DevOps Workflow');
    await expect(workflowBanner).toBeVisible();
    
    // Get banner position - should be near the top after header
    const bannerBox = await workflowBanner.boundingBox();
    console.log(`Banner position: ${bannerBox?.y}px from top`);
    
    // 2. Check hero section main elements
    await expect(page.getByText('Zero-Click')).toBeVisible();
    await expect(page.getByText('DevOps Access')).toBeVisible();
    await expect(page.getByRole('button', { name: /Launch SSO Hub/i })).toBeVisible();
    
    // 3. Check that Trust Indicators are visible
    await expect(page.getByText('Active DevOps Teams')).toBeVisible();
    
    // 4. Check statistics section is below trust indicators (not at bottom)
    const statsElements = [\n      page.getByText('Active Users'),\n      page.getByText('Connected Tools'),\n      page.getByText('System Health'),\n      page.getByText('System Uptime')\n    ];\n    \n    for (const element of statsElements) {\n      await expect(element).toBeVisible();\n    }\n    \n    // 5. Check Live Dashboard is more compact\n    const liveDashboard = page.getByText('Live Dashboard');\n    await expect(liveDashboard).toBeVisible();\n    \n    // 6. Check DevOps Ecosystem section is more compact\n    const devopsEcosystem = page.getByText('DevOps Ecosystem');\n    await expect(devopsEcosystem).toBeVisible();\n    \n    console.log('✅ All layout elements verified!');\n    \n    // Take comprehensive screenshot\n    await page.screenshot({ \n      path: 'layout-reorganized-desktop.png',\n      fullPage: true \n    });\n    \n    console.log('✅ Desktop layout reorganization successful');\n  });\n  \n  test('should maintain mobile responsive design', async ({ page }) => {\n    // Test mobile layout\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.goto('http://localhost:3000', { waitUntil: 'networkidle', timeout: 30000 });\n    await page.waitForTimeout(3000);\n    \n    console.log('✓ Testing mobile responsive layout...');\n    \n    // Core elements should be visible on mobile\n    await expect(page.getByText('Transform Your DevOps Workflow')).toBeVisible();\n    await expect(page.getByText('Zero-Click')).toBeVisible();\n    await expect(page.getByText('DevOps Access')).toBeVisible();\n    \n    // Statistics should be in grid format on mobile (2 columns)\n    const activeUsers = page.getByText('Active Users');\n    const connectedTools = page.getByText('Connected Tools');\n    await expect(activeUsers).toBeVisible();\n    await expect(connectedTools).toBeVisible();\n    \n    // Take mobile screenshot\n    await page.screenshot({ \n      path: 'layout-reorganized-mobile.png',\n      fullPage: true \n    });\n    \n    console.log('✅ Mobile responsive layout verified');\n  });\n  \n  test('should validate compact dashboard dimensions', async ({ page }) => {\n    await page.setViewportSize({ width: 1920, height: 1080 });\n    await page.goto('http://localhost:3000', { waitUntil: 'networkidle', timeout: 30000 });\n    await page.waitForTimeout(3000);\n    \n    console.log('✓ Measuring dashboard compactness...');\n    \n    // Find dashboard container\n    const dashboard = page.getByText('Live Dashboard').locator('..');\n    const dashboardBox = await dashboard.boundingBox();\n    \n    if (dashboardBox) {\n      console.log(`Dashboard dimensions: ${dashboardBox.width}x${dashboardBox.height}px`);\n      \n      // Verify dashboard is more compact (should be reasonable height)\n      expect(dashboardBox.height).toBeLessThan(800); // Should be compact\n      console.log('✅ Dashboard compactness verified');\n    }\n    \n    // Check DevOps Ecosystem section compactness\n    const ecosystem = page.getByText('DevOps Ecosystem');\n    await expect(ecosystem).toBeVisible();\n    \n    const ecosystemBox = await ecosystem.boundingBox();\n    if (ecosystemBox) {\n      console.log(`DevOps Ecosystem position: ${ecosystemBox.y}px from top`);\n    }\n    \n    console.log('✅ Component sizing validation complete');\n  });\n  \n  test('should validate visual hierarchy and flow', async ({ page }) => {\n    await page.setViewportSize({ width: 1920, height: 1080 });\n    await page.goto('http://localhost:3000', { waitUntil: 'networkidle', timeout: 30000 });\n    await page.waitForTimeout(3000);\n    \n    console.log('✓ Validating visual hierarchy...');\n    \n    // Get Y positions of key elements to verify proper flow\n    const elements = {\n      banner: await page.getByText('Transform Your DevOps Workflow').boundingBox(),\n      headline: await page.getByText('Zero-Click').boundingBox(),\n      trustIndicators: await page.getByText('Active DevOps Teams').boundingBox(),\n      statistics: await page.getByText('Active Users').boundingBox(),\n      liveDashboard: await page.getByText('Live Dashboard').boundingBox()\n    };\n    \n    console.log('Element positions (Y coordinates):');\n    console.log(`  Banner: ${elements.banner?.y}px`);\n    console.log(`  Headline: ${elements.headline?.y}px`);\n    console.log(`  Trust Indicators: ${elements.trustIndicators?.y}px`);\n    console.log(`  Statistics: ${elements.statistics?.y}px`);\n    console.log(`  Live Dashboard: ${elements.liveDashboard?.y}px`);\n    \n    // Verify proper visual hierarchy\n    if (elements.banner && elements.headline) {\n      expect(elements.banner.y).toBeLessThan(elements.headline.y);\n      console.log('✅ Banner positioned above headline');\n    }\n    \n    if (elements.trustIndicators && elements.statistics) {\n      expect(elements.trustIndicators.y).toBeLessThan(elements.statistics.y);\n      console.log('✅ Statistics positioned after Trust Indicators');\n    }\n    \n    console.log('✅ Visual hierarchy validation complete');\n  });\n});